{"version":3,"sources":["webpack:///./src/components/Bio.js","webpack:///./src/components/Layout.js","webpack:///./src/templates/blog-list.js"],"names":["Bio","data","site","siteMetadata","author","social","style","display","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","name","marginRight","minWidth","borderRadius","imgStyle","summary","href","twitter","Layout","header","location","title","children","__PATH_PREFIX__","pathname","scale","marginTop","boxShadow","color","to","fontFamily","marginLeft","maxWidth","padding","Date","getFullYear","BlogIndex","getSrc","node","srcSet","JSON","parse","json_metadata","image","render","this","props","siteTitle","posts","allHiveArticle","edges","pageContext","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","keywords","map","permlink","key","created","className","dangerouslySetInnerHTML","__html","body","flexWrap","justifyContent","alignItems","listStyle","rel","margin","React","Component","pageQuery"],"mappings":"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","file":"component---src-templates-blog-list-js-fc2a75e32113457e9717.js","sourcesContent":["/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Image from \"gatsby-image\"\r\n\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\r\n        childImageSharp {\r\n          fixed(width: 50, height: 50) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const { author, social } = data.site.siteMetadata\r\n  return (\r\n    <div\r\n      style={{\r\n        display: `flex`,\r\n        marginBottom: rhythm(2.5),\r\n      }}\r\n    >\r\n      <Image\r\n        fixed={data.avatar.childImageSharp.fixed}\r\n        alt={author.name}\r\n        style={{\r\n          marginRight: rhythm(1 / 2),\r\n          marginBottom: 0,\r\n          minWidth: 50,\r\n          borderRadius: `100%`,\r\n        }}\r\n        imgStyle={{\r\n          borderRadius: `50%`,\r\n        }}\r\n      />\r\n      <p>\r\n        Written by <strong>{author.name}</strong> {author.summary}\r\n        {` `}\r\n        <a href={`https://twitter.com/${social.twitter}`}>\r\n          You should follow him on Twitter\r\n        </a>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nimport { rhythm, scale } from \"../utils/typography\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  let header\r\n\r\n  if (location.pathname === rootPath) {\r\n    header = (\r\n      <h1\r\n        style={{\r\n          ...scale(1.5),\r\n          marginBottom: rhythm(1.5),\r\n          marginTop: 0,\r\n        }}\r\n      >\r\n        <Link\r\n          style={{\r\n            boxShadow: `none`,\r\n            color: `inherit`,\r\n          }}\r\n          to={`/`}\r\n        >\r\n          {title}\r\n        </Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <h3\r\n        style={{\r\n          fontFamily: `Montserrat, sans-serif`,\r\n          marginTop: 0,\r\n        }}\r\n      >\r\n        <Link\r\n          style={{\r\n            boxShadow: `none`,\r\n            color: `inherit`,\r\n          }}\r\n          to={`/`}\r\n        >\r\n          {title}\r\n        </Link>\r\n      </h3>\r\n    )\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        marginLeft: `auto`,\r\n        marginRight: `auto`,\r\n        maxWidth: rhythm(24),\r\n        padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\r\n      }}\r\n    >\r\n      <header>{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        © {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport SEO from '../components/seo'\r\nimport Bio from '../components/Bio'\r\nimport Layout from '../components/Layout'\r\nimport { rhythm } from '../utils/typography'\r\n\r\nclass BlogIndex extends React.Component {\r\n\r\n  getSrc = function(node) {\r\n    let srcSet = JSON.parse(node.json_metadata).image;\r\n    if(srcSet)\r\n      return 'https://images.hive.blog/640x0/' + srcSet[0];\r\n    else \r\n      return '/noimage.png';\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.props\r\n    const siteTitle = data.site.siteMetadata.title\r\n    const posts = data.allHiveArticle.edges\r\n    const { currentPage, numPages } = this.props.pageContext\r\n    const isFirst = currentPage === 1\r\n    const isLast = currentPage === numPages\r\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\r\n    const nextPage = (currentPage + 1).toString()\r\n\r\n    return (\r\n      <Layout location={this.props.location} title={siteTitle}>\r\n        <SEO\r\n          title={siteTitle}\r\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\r\n        />\r\n        <Bio />\r\n        {posts.map(({ node }) => {\r\n        const title = node.title || node.permlink\r\n        return (\r\n          <article key={node.permlink}>\r\n            <header>\r\n              <h3\r\n                style={{\r\n                  marginBottom: rhythm(1 / 4),\r\n                }}\r\n              >\r\n                <Link style={{ boxShadow: `none` }} to={node.permlink}>\r\n                  {title}\r\n                </Link>\r\n              </h3>\r\n              <small>{node.created}</small>\r\n            </header>\r\n            <section>\r\n              <img className='img-body' srcSet={this.getSrc(node)} alt={node.permlink}/>\r\n              <p className='hive-body'\r\n                dangerouslySetInnerHTML={{\r\n                  __html: node.body,\r\n                }}\r\n              />\r\n            </section>\r\n          </article>\r\n        )\r\n      })}\r\n        <ul\r\n          style={{\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            listStyle: 'none',\r\n            padding: 0,\r\n          }}\r\n        >\r\n          {!isFirst && (\r\n            <Link to={prevPage} rel=\"prev\">\r\n              ← Previous Page\r\n            </Link>\r\n          )}\r\n            <li\r\n              key={`pagination-number${currentPage}`}\r\n              style={{\r\n                margin: 0,\r\n              }}\r\n            >\r\n              {currentPage}\r\n            </li>\r\n          {!isLast && (\r\n            <Link to={nextPage} rel=\"next\">\r\n              Next Page →\r\n            </Link>\r\n          )}\r\n        </ul>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query($skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allHiveArticle (\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          title\r\n          author\r\n          created(formatString: \"MMMM DD, YYYY\")\r\n          permlink\r\n          body,\r\n          json_metadata\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}