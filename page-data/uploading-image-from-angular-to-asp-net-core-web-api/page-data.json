{"componentChunkName":"component---src-templates-blog-post-js","path":"/uploading-image-from-angular-to-asp-net-core-web-api","result":{"data":{"site":{"siteMetadata":{"title":"My Hive Posts"}},"hiveArticle":{"title":"Uploading Image from Angular to ASP.NET Core Web API","body":"![](https://1.bp.blogspot.com/-YFj71Z8esZw/XTB0OKvoyMI/AAAAAAAAC_I/VDylqIfgRBIVO5HN2BFwFedz5RkckzkWACLcBGAs/s1600/angularerror.PNG)\n\nIn this post we will be discussing about creating an application where you can upload image from angular 8 to ASP.NET Core Web API using ASP.NET Boilerplate. In this we will be going through Back End first i.e. ASP.NET Core part and then we will go through the frontend i.e. Angular.\n\nI have written a function UploadProfilePicture in UserAppService which will handle the upload of profile pic and then create image on a predefined location. \n\nThe logic behind it very straight forward where we are providing the path where the file will be stored. We check if the directory exists or not, if not then creating the directory. Then we are creating the file stream object and then storing the file in that location.\n\n```\npublic async Task<string> UploadProfilePicture([FromForm(Name = \"uploadedFile\")] IFormFile file, long userId)\n{\n  if (file == null || file.Length == 0)\n    throw new UserFriendlyException(\"Please select profile picture\");\n\n  var folderName = Path.Combine(\"Resources\", \"ProfilePics\");\n  var filePath = Path.Combine(Directory.GetCurrentDirectory(), folderName);\n\n  if (!Directory.Exists(filePath))\n  {\n    Directory.CreateDirectory(filePath);\n  }\n\n  var uniqueFileName = $\"{userId}_profilepic.png\";\n  var dbPath = Path.Combine(folderName, uniqueFileName);\n\n  using (var fileStream = new FileStream(Path.Combine(filePath, uniqueFileName), FileMode.Create))\n  {\n    await file.CopyToAsync(fileStream);\n  }\n\n  return dbPath;\n}\n```\n\n### Few things to note here :\n\n1. IFormFile object will come as null if the name attribute of the file input is not same as that of the name of the parameter used in the controller. So you should name then same or use [FromForm(Name = \"\")] and then assign the name as shown below.\n\n2. Since we are creating a new directory we need to tell ASP.NET Core to serve the static files from that location. For that we need to modify the Configure method of Startup.cs class as shown below :\n\n```\napp.UseStaticFiles(new StaticFileOptions()\n{\n FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @\"Resources\")),\n RequestPath = new PathString(\"/Resources\")\n});\n```\n\n3. When using IFormFile, the swagger will give you multiple text boxes like ContentType, ContentDisposition, Headers, Length, Name, FileName etc  instead of file upload control. To change the textboxes to the actual file upload control we need to implement IOperationFilter and then implement the apply method as shown below. The main part is type where we need to define file, since we are clearing all the previous parameters we also need to add the user id parameter.\n\n```\nusing Swashbuckle.AspNetCore.Swagger;\n\nusing Swashbuckle.AspNetCore.SwaggerGen;\n\nnamespace LetsDisc.Web.Host.Startup\n{\n public class FileUploadOperation : IOperationFilter\n {\n  public void Apply(Operation operation, OperationFilterContext context)\n  {\n   if (operation.OperationId.ToLower().Contains(\"upload\")))\n   {\n    operation.Parameters.Clear();\n    operation.Parameters.Add(new NonBodyParameter\n    \t{\n          Name = \"uploadedFile\",\n          In = \"formData\",\n          Description = \"Upload File\",\n          Required = true,\n          Type = \"file\"\n        });\n    operation.Parameters.Add(new NonBodyParameter\n        {\n          Name = \"userId\",\n          In = \"query\",\n          Description = \"\",\n          Required = true,\n          Type = \"long\"\n        });\n    operation.Consumes.Add(\"multipart/form-data\");\n   }\n  }\n }\n}\n```\n\nThus we are finished with the backend, now we will go forward with the frontend implementation.\n\n### HTML\n\nIn HTML we will have an input of type file and then we have both change and click function so that user can upload the same image twice.\n\n```\n<div class=\"col-md-3 profile-image-edit\">\n <label class=\"hoverable\" for=\"fileInput\">\n ... img tag\n  <span class=\"hover-text\">Choose file</span>\n  <span class=\"background\"></span>\n </label>\n <br />\n <input #fileInput id=\"fileInput\" type='file' (click)=\"fileInput.value = null\" value=\"\" (change)=\"onSelectFile($event.target.files)\">\n <button class=\"btn btn-default\" *ngIf=\"url\" (click)=\"delete()\">delete</button>\n</div>\n```\n\n### CSS\n\n```\n.hoverable {\n    position: relative;\n    cursor: pointer;\n    height: 150px;\n    width: 150px;\n    border-radius: 50%;\n}\n\n    .hoverable .hover-text {\n        position: absolute;\n        display: none;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%,-50%);\n        z-index: 2;\n    }\n\n    .hoverable .background {\n        position: absolute;\n        display: none;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        background-color: rgba(255, 255, 255, 0.5);\n        pointer-events: none;\n        border-radius: 50%;\n        z-index: 1;\n    }\n\n    .hoverable:hover .hover-text {\n        display: block;\n    }\n\n    .hoverable:hover .background {\n        display: block;\n    }\n```\n\n### Code Behind\n\nIn the code behind we will have a function which has a fileReader ojject to preview the image as well as we will be calling our backend service for uploading the image.\n\n```\nonSelectFile(files: FileList) {\n        \n  if (files.length === 0)\n    return;\n        \n  this.fileToUpload = files.item(0);\n\n        \n  const fileReader: FileReader = new FileReader();\n  fileReader.readAsDataURL(this.fileToUpload);\n\n  fileReader.onload = (event: any) => {\n    this.url = event.target.result;\n  };\n\n  this.files.push({ data: this.fileToUpload, fileName: this.fileToUpload.name });\n\n  this._userService.uploadProfilePicture(this.files[0], this.user.id)\n    .subscribe((result: string) => {\n      this.userDetails.profileImageUrl = result;\n  });\n}\n\ndelete() {\n  this.url = null;\n}\n```\n\n![](https://1.bp.blogspot.com/-ZixJCZe7FHI/XTBzBny_23I/AAAAAAAAC_A/Rz7nQPU6RTYu_z9BkH7a3_tPhei6mXeKQCLcBGAs/s1600/angularerror.PNG)\n\nGitHub Commit: https://github.com/codingdefined/LetsDisc/commit/ab7af63ba3cf94c23278fc2fe00d3769672bf506\n\n----\n\n## Also Published: [CodingDefined.com](https://www.codingdefined.com/2019/07/uploading-image-from-angular-to-aspnet.html)","created":"July 19, 2019"}},"pageContext":{"title":"Uploading Image from Angular to ASP.NET Core Web API","permlink":"uploading-image-from-angular-to-asp-net-core-web-api","previous":{"title":"Focus for a little longer","permlink":"focus-for-a-little-longer-78e9e8e02afeb"},"next":{"title":"Introducing RealityHubs! A place for reviewers.","permlink":"introducing-realityhubs-a-place-for-reviewers"}}}}