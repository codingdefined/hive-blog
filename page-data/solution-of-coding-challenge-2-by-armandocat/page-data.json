{"componentChunkName":"component---src-templates-blog-post-js","path":"/solution-of-coding-challenge-2-by-armandocat","result":{"data":{"site":{"siteMetadata":{"title":"My Hive Posts"}},"hiveArticle":{"title":"Solution of Coding challenge #2 by @armandocat","body":"I have participated in (Coding challenge #2)(https://steemit.com/contest/@armandocat/coding-challenge-2-win-sbd-if-you-solve-the-problem) organized by @armandocat and here is my solution.  \n\nThe Coding Challenge Was\n\n>In a Linked list, each node has a value and a next node.\nGiven a Linked list:\n\n>Write a function that reverse the linked list, using a recursive algorithm.\nWrite a function that reverse the linked list, using a iterative algorithm.\nFor instance: given A -> B -> C it returns C -> B ->A\nYou don't have to clone the nodes, you must just work on their next properties.\n\nSince the Preferred Language was JavaScript, I have written in that. There is a starting code which you can get it from here https://pastebin.com/tHBtHZVF.\n\nThe solution for Iterative Reversal of Linked List. Iterative Reversal means you can reverse each element one by one by using a loop. I have used while loop.\n\n```javascript\nfunction reverseIterative(obj) {\n  // Keeping the copy of obj locally and making original object as null\n  var node = obj;\n  obj = null;\n\n  // Starting the while loop\n  while(node) {\n   // In Javascript you can get the next element in the linked list using .next\n   // So keeping the next element as a local copy\n    var nextNode = node.next;\n   // In the next three lines we are just swapping the elements from Previous to Next\n    node.next = obj;\n    obj = node;\n    node = nextNode;\n  }\n  // Once we get our object, send the object back\n  return obj;\n}\n ```\n\nThe solution for Recursive Reversal of Linked List. Recursive meaning that the function will call itself. \n\n```javascript\nfunction reverseRecursive(obj) {\n  // We will check if the obj or obj.next is null or undefined, if it is just return it\n  if (!obj || !obj.next) {\n    return obj;\n  }\n // Keeping a local copy of obj\n  var nextNode = obj.next;\n  // Calling the Recursive Function using the next node (Recursion)\n  var currentNode = reverseRecursive(nextNode);\n  //Now the resursion function will be called until the obj is not null.\n  obj.next = null;\n  nextNode.next = obj;\n  // For each funtion call we will return the currentNode\n  return currentNode;\n}\n```\n## <center>The output is shown below :</center>\n\n<center>![](https://steemitimages.com/DQmR35DvWzp2AhgdSsf1HX8kfw6JDELQzLrf51BtrAKbfzf/image.png)</center>\n\nYou can get the full solution here: https://repl.it/LWfO/0. A lot of improvements can be made, like removing the unnecessary local variable. Any suggestion is welcomed.\n\n<hr>\n\n## <center>Follow @codingdefined </center>","created":"September 22, 2017"}},"pageContext":{"title":"Solution of Coding challenge #2 by @armandocat","permlink":"solution-of-coding-challenge-2-by-armandocat","previous":{"title":"ðŸ“· #ColorChallenge - Friday Blue - A Blue Sky ðŸ“·","permlink":"colorchallenge-friday-blue-a-blue-sky"},"next":{"title":"ðŸ“· Beautiful Sunset In Bangalore, India ðŸ“·","permlink":"beautiful-sunset-in-bangalore-india"}}}}