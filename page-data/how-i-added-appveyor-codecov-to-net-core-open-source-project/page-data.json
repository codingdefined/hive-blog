{"componentChunkName":"component---src-templates-blog-post-js","path":"/how-i-added-appveyor-codecov-to-net-core-open-source-project","result":{"data":{"site":{"siteMetadata":{"title":"My Hive Posts"}},"hiveArticle":{"title":"How I added AppVeyor, Codecov to .Net Core Open Source Project","body":"AppVeyor is Continous Integration and Deployment solution where you can build, test and deploy your apps faster to any platform. One good advantage of using appveyor is that it is free for Open Source repositories. It's actually good when your repo is accepting pull request from people and then you can test if the pull request is merging or not. \n\nOn the other hand, Codec helps you to do a health check on your code, i.e. it is a measurement on how many lines of your code are executed when automated tests are performing. Now 100% Code Coverage means that all your code is covered under tests, but that is very hard to achieve. \n\nI have to do a lot of commits to test the AppVeyor and Codecov and at last, it iwas successful and I can build and generate a code coverage report for my application. At first, I have started using NuGet package OpenCover to create code-coverage in my local environment and it was working after trial and error method.\n\nThe Script I have used is as below\n\n```\nOpenCover.Console.exe -register:user \n-target:\"C:\\Program Files\\dotnet\\dotnet.exe\" \n-targetargs:\"test\\LetsDisc.Tests\\bin\\Debug\\netcoreapp2.1\\LetsDisc.Tests.dll -noshadow\" \n-oldStyle -output:\".\\coverage.xml\" \n-filter:\"+[LetsDisc*]* -[Tests*]*\" -coverbytest:\"XUnit\"\n```\n----\n\nBut as a developer, we should know that what works in local has a 100% probability that it will not work in some other environments. That is what happened in my case when I tried to run the above script in AppVeyor some or the other issues are popping up. But at last, I made it work. So the final script is\n\n```\nversion: 1.0.{build}\nimage: Visual Studio 2017\nconfiguration: Release\nskip_tags: true\nbefore_build:\n - nuget restore\n - nuget install OpenCover -OutputDirectory packages -Version 4.6.519\nbuild_script:\n - msbuild /verbosity:quiet LetsDisc.sln\ntest_script:\n - .\\packages\\OpenCover.4.6.519\\tools\\OpenCover.Console.exe \n-register:user \n-target:\"C:/Program Files/dotnet/dotnet.exe\" \n-targetargs:\"test --logger:trx;LogFileName=results.trx \n/p:DebugType=full \nC:\\projects\\letsdisc\\test\\LetsDisc.Tests\\LetsDisc.Tests.csproj\" \n-output:\"coverage.xml\" -filter:\"+[LetsDisc*]* -[Tests*]*\"\nafter_test:\n  - ps: |\n      $env:PATH = 'C:\\msys64\\usr\\bin;' + $env:PATH\n      Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh\n      bash codecov.sh -f \"coverage.xml\"\n```\n----\n\nThe above script means on every build I will be updating it with a version of 1.0.{buildNumber}, then use Visual Studio 2017 as an image to build the project, then use configuration as release mode and not debug so that it can be easily deployable. Before the build just restoring all the nuget package, as well as installing OpenCover specific version which works with AppVeyor. After that building the project using msbuild and then running my test script to run the tests and create the coverage report. After the test is scuccessful deploying the coverage.xml file to the Codecov website.\n\nIt was fun as well as a learning experiment where I learned to use an Appveyor app as well adding the Coverage report to my project. \n\nRepo : https://github.com/codingdefined/LetsDisc\n\n----\n\n#### Also Published to My Personal Blog: https://www.codingdefined.com/2018/10/how-i-added-appveyor-codecov-to-net.html","created":"October 16, 2018"}},"pageContext":{"title":"How I added AppVeyor, Codecov to .Net Core Open Source Project","permlink":"how-i-added-appveyor-codecov-to-net-core-open-source-project","previous":{"title":"Beautiful Sunday Trip to BBQ'D Restaurant","permlink":"beautiful-sunday-trip-to-bbq-d-restaurant"},"next":{"title":"Have you voted Steem on NetCoins Yet","permlink":"have-you-voted-steem-on-netcoins-yet"}}}}