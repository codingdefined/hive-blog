{"componentChunkName":"component---src-templates-blog-post-js","path":"/getting-started-with-gatsby-js-part-2","result":{"data":{"site":{"siteMetadata":{"title":"My Hive Posts"}},"hiveArticle":{"title":"Getting Started With Gatsby.js - Part 2","body":"In this tutorial you will be Learning \n\n- Styling Gatsby Website\n- CSS in Gatsby\n- Gatsby Plugins\n\n#### Difficulty\n\n- Basic\n\n#### Tutorial Contents\n\nBefore Starting the tutorial we will go through the Part 1 again as a part of Recap, so in Part 1 we have learnt about the directory structure of the Gatsby Directory, Helmet Component which attached all the header meta information like description, keywords to your generated HTML file. A lot of Components like TemplateWrapper, Link, IndexPage etc. \n\nYou might be thinking that what is the use of Components and why its necessary. The answer of this question is the code architecture is simplified for building large websites because then you get some part of the code which can be reused as well as keeping it as simple as possible. \n\nSo a simple example for a Component would be a LinkButton. For creating a link button we would have been using `a` tag and add a href, with some text inside it. Since we are talking about components the best is to create a LinkButton component and whenever we will be using it use it like <LinkButton>This is a LinkButton Component</LinkButton>. Thus your website will be made of components and it is a building block of your Website.\n\n##### Styling Gatsby Website & CSS in Gatsby\n\nSince most of us are familiar with CSS, we will be looking at one of the library which Gatsby Provides and that will help us to do styling in Gatsby. We will be using [Glamor](https://github.com/threepointone/glamor) which helps you to write CSS diretly in your components. The advantage of using it is that it helps in resolving th name conflict which we often encounter in normal CSS thus no need to write !important to fix any issue. Since all the CSS elements are tightly coupled with their components it makes it easier to edit those rather than thinking where all the components are being used.\n\nAt first we will install the plugin as `npm install --save gatsby-plugin-glamor` and then add it to the gatsby-config.js as shown below :\n\n```\nmodule.exports = {\n  siteMetadata: {\n    title: 'Gatsby Default Starter',\n  },\n  plugins: ['gatsby-plugin-react-helmet', 'gatsby-transformer-json', 'gatsby-plugin-glamor'],\n};\n```\nIn the below code we are using the Glamor where we are writing the inline CSS inside the div element\n\n```\nimport React from \"react\"\nconst UtopianMod = p =>\n  <div\n    css={{\n      display: `flex`,\n      alignItems: `center`\n    }}\n  >\n    <div css={{ flex: 1, marginLeft: 20, padding: 15 }}>\n        {p.modname} : {p.modcategory}\n    </div>\n  </div>\nexport default () => <div>\n    <h1>Utopian Moderator</h1>\n    <UtopianMod\n      modname=\"Coding Defined\"\n      modcategory=\"Review's Development and Bugs\"\n    />\n    <UtopianMod\n      modname=\"ABC\"\n      modcategory=\"Review's XYZ and PQR\"\n    />\n</div>\n```\n\nWhen you run it, it will be shown as where you can see all the css has different tag attached to it, thus making it really easy to update it.\n\n![gatsby3.PNG](https://res.cloudinary.com/hpiynhbhq/image/upload/v1517050899/xatrpsg31wytne6viabu.png)\n\nNow there is one more option for you if you do not like to use Glamor and that is Styled Components. In styled Components you can write actual CSS element inside your Components and not like Glamor where you will write CSS in the property. It also has the same advantage as Glamor where it helps in resolving the name conflict which we often encounter in normal CSS thus no need to write !important to fix any issue. Since all the CSS elements are tightly coupled with their components it makes it easier to edit those rather than thinking where all the components are being used.\n\nFor working on it you need to install two plugins gatsby-plugin-styled-components and styled-components as shown below\n`npm install --save gatsby-plugin-styled-components styled-components`\n\nSimilarly you need to add it in gatsby-config.js and also styled-components is to be imported in your file.  Now lets say we want our modname and modcategory should be different, so we will write ModWrapper, Modname and ModCategory component and just change the normal CSS with the component.\n\n```\nconst ModWrapper = styled.div`\n  display: `flex`,\n  alignItems: `center`\n`;\nconst Modname = styled.h2`\n  margin: 0 0 15px 0;\n  padding: 0;\n`;\nconst Modcategory = styled.div`\n  flex: 1;\n  margin-left: 20px;\n  padding: 15px;\n`;\nconst User = p => (\n  <ModWrapper >\n      <Modname >{p.modname}</Modname >:\n      <Modcategory >{p.modcategory}</Modcategory >\n  </ModWrapper >\n);\n```\n\n##### Gatsby Plugins\n\nGatsby Plugins are small amounts of JavaScript code which is created by the community members which can be used when you are building Gatsby Sites. There are a lot of plugins available, even though if you like your own plugin you can create that just by writing your own Javascript code. The plugins are easy to install and use thus you do not have to reinvent the wheel of writing everything of your own.\n\nTo install any plugins at first you need to have a npm installed, then you can install it using the command `npm install --save gatsby-transformer-json` where gatsby-transformer-json is a plugin for parsing raw JSON strings into JavaScript objects from JSON files.\n\nNext you need to add it to the gatsby-config.js file as shown below\n\n```\nmodule.exports = {\n  siteMetadata: {\n    title: 'Gatsby Default Starter',\n  },\n  plugins: ['gatsby-plugin-react-helmet', 'gatsby-transformer-json'],\n};\n```\n\n#### Curriculum\n\n- [Getting Started With Gatsby.js - Part 1](https://utopian.io/utopian-io/@codingdefined/getting-started-with-gatsby-js-part-1)\n\n<br /><hr/><em>Posted on <a href=\"https://utopian.io/utopian-io/@codingdefined/getting-started-with-gatsby-js-part-2\">Utopian.io -  Rewarding Open Source Contributors</a></em><hr/>","created":"January 27, 2018"}},"pageContext":{"title":"Getting Started With Gatsby.js - Part 2","permlink":"getting-started-with-gatsby-js-part-2","previous":{"title":"B&W Photo Contest - Nature Abstracts - Multiple Entries","permlink":"b-and-w-photo-contest-nature-abstracts-multiple-entries"},"next":{"title":"Utopian Github Account to Post Issues","permlink":"utopian-github-account-to-post-issues"}}}}