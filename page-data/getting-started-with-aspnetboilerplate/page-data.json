{"componentChunkName":"component---src-templates-blog-post-js","path":"/getting-started-with-aspnetboilerplate","result":{"data":{"site":{"siteMetadata":{"title":"My Hive Posts"}},"hiveArticle":{"title":"Getting Started with AspnetBoilerPlate","body":"#### Repository\n- https://github.com/aspnetboilerplate/aspnetboilerplate\n\n#### What Will I Learn?\n\n- You will learn about AspnetBoilerPlate\n- You will learn about How to get started with AspnetBoilerPlate\n- You will learn the basic structure of the Code Base in AspnetBoilerPlate\n- You will learn about creating Tasks in AspnetBoilerPlate\n\n#### Requirements\n\n- Basic Understanding of C#\n- Visual Studio 2017\n\n#### Difficulty\n\n- Basic\n\n#### Tutorial Contents\n\n##### What is AspnetBoilerPlate\n\nWhenever you have to develop an application, you have to think about designing the architecture of the application, the security, the performance and how to minimize the development effort. What if I say that all the above things are already done for you, you just have to add the business logic to get up and running with the modern day application. \n\nThis is where ASP.NET Boilerplate comes into the picture, which is an application framework which implements best practices thus helps the developers to focus only on the development of the application and do not think about the architecture.\n\n##### How to get started with AspnetBoilerPlate\n\nTo get started with ASP.NET Boiler Plate just head over to the https://www.aspnetboilerplate.com/Templates site and download the source code\n\n![](https://steemitimages.com/DQmRnSjE5FGM4QKCaMNnDNGCjtRY9VrVMRDhKEFSXDNPWpr/image.png) \n\n##### Basic structure of the Code Base in AspnetBoilerPlate\n\nWhen you download the Source Code you will be seeing the below structure of the Code Base. Now all of them are the different layers in the NLayered Architecture.\n\n![](https://steemitimages.com/DQmVvMNunHegSKVU9KuzDGTQU48fVjmxcwPRgX6jq4xHdSg/image.png)\n\n**Infrastructure Layer** is the base layer of the framework where our ORM, Data Migrations, and other DB related tasks are done. In the ASPNETBoilerPlate it is done on the EntityFramework Core application.  This is called infrastructure because it provides data to all other layers to be worked on.\n\n**Domain Layer** is the layer which has domain logic is written like the Entities which will talk to the Infrastructure Layer, the objects which will hold the value after fetching it from DB. The Core solution.\n\n**Application Layer** is the layer which acts as a link to fetch the values from the Domain Layer and pass it on to the frontend. It also helps in maintaining the authorization, session, caching etc. The application solution.\n\n**Service Layer** is the layer which is used to pass values if called as a REST Service. They mainly do not contain any logic, but just pass the values to the callee application. The Web.host solution.\n\n**Presentation Layer** is the layer which is shown to the end user and the end user interacts with it. The Web.MVC solution.\n\nThe above are the NLayered architecture which sums up the whole application.\n\n#### Creating Tasks in AspnetBoilerPlate\n\nSince we know about the architecture, let's say if you want to build something like Steemit where you will store the Content in a database. For that you will be creating tasks, I will show how to do that.\n\nAt first, you need to create a task in the Domain Layer i.e.  .Core project. In the below code we have a created a SteemitPost which mainly contains three things Title, Body, and Tags. It is the simplest things you need when you create a Post. You can also see I have inherited the class CreationAuditedEntity because that will add which user has created this post and when.\n\n```\nusing System.Collections.Generic;\nusing Abp.Domain.Entities.Auditing;\n\nnamespace MyApp\n{\n    public class SteemitPost: CreationAuditedEntity<int, User>\n    {\n        public virtual string Title { get; set; }\n        public virtual string Body { get; set; }\n        public virtual string Tags { get; set; }\n\n        public SteemitPost(string title, string text, string tags)\n        {\n            Title = title;\n            Body= text;\n            Tags = tags;\n        }\n    }\n}\n```\n\nNext thing is that we have to add it to our infrastructure project i.e. EntityFramework. So inside DbContext.cs add the below line which basically tells the ORM that whenever you create the Database create SteemitPost entity too.\n\n```\npublic virtual IDbSet<SteemitPost> SteemitPost { get; set; }\n```\n\nThen we have to run the Update-Database command from the Package Manager Console which creates the Table i.e. SteemitPost.\n\nNow we have a ready Database which has the required table SteemitPost and contains three Columns Title, Body and Tags. Next is how we get all the posts or specific posts. For that, we have to write a Service in an .Application Layer.\n\nAt first, we will be creating a DTO i.e. or Data Transfer Object\n\n```\nusing Abp.Application.Services.Dto;\nusing Abp.AutoMapper;\n\nnamespace MyApp\n{\n    [AutoMapFrom(typeof(SteemitPost))]\n    public class SteemitPostDto : CreationAuditedEntityDto\n    {\n        public string Title { get; set; }\n        public string Text { get; set; }\n        public string Tags { get; set; }\n    }\n}\n```\n\nNext is to define an interface for my DTO\n\n```\npublic interface ISteemitPostAppService : IApplicationService\n    {\n        PagedResultDto<SteemitPostDto> GetSteemitPosts(GetSteemitPostInput input);\n    }\n```\n\nAnd then writing the actual logic to get all the posts\n\n```\n[AbpAuthorize]\n    public class SteemitPostAppService : ApplicationService, ISteemitPostAppService\n    {\n        private readonly IRepository<SteemitPost> _SteemitPostRepository;\n        public SteemitPostAppService(IRepository<SteemitPost> steemitPostRepository)\n        {\n            _steemitPostRepository= steemitPostRepository;\n        }\n\n        public PagedResultDto<SteemitPostDto> GetSteemitPosts(GetSteemitPostInput input)\n        {\n            var posts=\n                _steemitPostRepository\n                    .GetAll()\n                    .ToList();\n\n            return new PagedResultDto<SteemitPostDto>\n                   {\n                       Items = posts.MapTo<List<SteemitPostDto>>()\n                   };\n        }\n}\n```\n\nThat's it done, now we just have to call the Application Layer from the Frontend to get all the Steemit Posts. It is just for basic understanding is to how easy is the development when you have a framework like AspNetBoilerPlate.","created":"May 12, 2018"}},"pageContext":{"title":"Getting Started with AspnetBoilerPlate","permlink":"getting-started-with-aspnetboilerplate","previous":{"title":"ColorChallenge - Friday Blue - Sky","permlink":"colorchallenge-friday-blue-sky"},"next":{"title":"How to get Details of All the Posts a Person Upvoted in Steemit","permlink":"how-to-get-details-of-all-the-posts-a-person-upvoted-in-steemit"}}}}