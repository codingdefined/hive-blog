{"componentChunkName":"component---src-templates-blog-post-js","path":"/getting-started-with-gatsby-js-part-4","result":{"data":{"site":{"siteMetadata":{"title":"My Hive Posts"}},"hiveArticle":{"title":"Getting Started With Gatsby.js - Part 4","body":"### In this tutorial, you will be Learning\n\n- How to create Gatsby Source Plugin\n- How to Use that Plugin in Your Application\n\n### Requirements\n\nNode.js and NPM installed on your System\nKnow basics of HTML, CSS and JavaScript, though not mandatory\n\n### Difficulty\n\nIntermediate\n\n### Tutorial Contents\n\n##### How to create Gatsby Source Plugin\n\nGatsby's Source plugins are the medium where you can get the data from the remote location (i.e. through the API) or from your local system (i.e. file system). \n\nGatsby Source Plugin is very similar to an NPM package where you need to publish that in NPM. Likewise we will have a package.json file which will have the information about your Plugin along with the dependencies. \n\nFor Example a typical package.json looks like below where you have the name, version, description, scripts if any, author, license and the dependencies. The dependencies are nothing but all the details of the packages I am using for this Plugin.\n\n```\n{\n  \"name\": \"gatsby-source-myplugin\",\n  \"version\": \"0.0.1\",\n  \"description\": \"My Source Plugin\",\n  \"main\": \"gatsby-node.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Coding Defined <codingdefined@gmail.com> (http://www.codingdefined.com)\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"utopian-api\": \"^0.4.1\"\n  }\n}\n```\n\nAs you can see above I main file as gatsby-node.js where all teh code for this plugin will be going. Here we will have two main Nodes \n\na. sourceNodes, \nb. createNode\n\n1 - You will be exporting the sourceNodes, so that any Gatsby app calling your plugin can consume it. So your gatsby-node.js will start with something like below.\n\n```\nexports.sourceNodes = async ({ boundActionCreators }) => {\n    return;\n};\n```\n\n2 - Now the createNode is used to create a new node which will have below properties\n\n- id - The id of the node\n- parent - The id of the parent node\n- children - Its an array which contains id of all teh children node\n- internal - Internal is an object where we have mediaType, type, content, and contentDigest. MediaType gives a sense to the transformer plugin (if used) that the content can be transformed or not. Type is used to query all the posts for the plugin in GraphQL. Content is the content of the node and contentDigest is the digest for the content.\n\nSo since we know about sourceNodes and createNode it will be dead simple to create your Gatsby Source Plugin. Lets create a single node first, for example if I get a post which has id and the content, what I am going to do is to write a createNode function and add parent, children, internal to it as shown below. \n\n```\ncreateNode({\n  ...post,\n  id: `${post.id}`,\n  parent: \"root\",\n  children: [],\n  internal: {\n    type: 'MyPost',\n    content: nodeStr,\n    contentDigest: nodeHash,\n  },\n});\n```\n\nThe \"post\" in teh first line is the full post, id is the id of the post. Since I do not need any parent for this post I will assign \"root\", children also is empty. The type of the post is \"MyPost\" that means if I use GraphiQL I can use it as AllMyPost to get all the nodes. Now content is the post itself, for that I first stringify the post as shown below, and assign the nodeStr to the content.\n\n`const nodeStr = JSON.stringify(post);`\n\nNext is to specify the digest for the content using contentDigest. For that first we have to have crypto in your file using `const crypto = require('crypto');`. Next we will be creating a md5 hash and then update the nodeStr (i.e. the stringify post of ours) with it and then create a digest in hex as shown below\n\n```\nconst nodeHash = crypto\n     .createHash('md5')\n     .update(nodeStr)\n     .digest('hex');\n```\n\nLets say we get 10 posts as an array of object so we will be going through it one by one and then creating the node for each one of them as shown below\n\n```\nposts.forEach(post => {\n  const nodeStr = JSON.stringify(post);\n  const nodeHash = crypto\n    .createHash('md5')\n    .update(nodeStr)\n    .digest('hex');\n\n  createNode({\n   ...post,\n     id: `${post.id}`,\n     parent: \"root\",\n     children: [],\n     internal: {\n       type: 'MyPost',\n       content: nodeStr,\n       contentDigest: nodeHash,\n     },\n  });\n});\n```\n\nNow the full code should be inside our sourceNodes, thus our full code looks like below\n\n```\nconst crypto = require('crypto');\n\nexports.sourceNodes = async ({ boundActionCreators }) => {\n  const { createNode } = boundActionCreators;\n  return posts.forEach(post => {\n           const nodeStr = JSON.stringify(post);\n           const nodeHash = crypto\n                   .createHash('md5')\n                   .update(nodeStr)\n                   .digest('hex');\n\n           createNode({\n             ...post,\n             id: `${post.id}`,\n             parent: \"root\",\n             children: [],\n             internal: {\n                type: 'MyPost',\n                content: nodeStr,\n                contentDigest: nodeHash,\n             },\n           });\n  });\n};\n```\n\n##### How to Use that Plugin in Your Application\n\nAt first we need to add our newly constructed plugin in the gatsby-config.js file as shown below\n\n```\nmodule.exports = {\n  plugins: [{resolve: 'gatsby-source-myplugin'}],\n};\n```\n\nAnd then to get the data to our app, we need to add a qraphQl query as shown bwlow\n\n```\nexport const query = graphql`\n  query IndexQuery {\n      allMyPost {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n  }\n`;\n```\n\nAnd next is to use it, where we are iterating over the data and get the id of the node\n\n```\n{data.allMyPost.edges.map(({ node }) => (\n  <div>\n    {node.id}\n  </div>\n))}\n```\n\n\n### Curriculum\n\n- [Getting Started With Gatsby.js - Part 1](https://utopian.io/utopian-io/@codingdefined/getting-started-with-gatsby-js-part-1)\n- [Getting Started With Gatsby.js - Part 2](https://utopian.io/utopian-io/@codingdefined/getting-started-with-gatsby-js-part-2)\n- [Getting Started With Gatsby.js - Part 3](https://steemit.com/utopian-io/@codingdefined/getting-started-with-gatsby-js-part-3)\n\n<br /><hr/><em>Posted on <a href=\"https://utopian.io/utopian-io/@codingdefined/getting-started-with-gatsby-js-part-4\">Utopian.io -  Rewarding Open Source Contributors</a></em><hr/>","created":"March 01, 2018"}},"pageContext":{"title":"Getting Started With Gatsby.js - Part 4","permlink":"getting-started-with-gatsby-js-part-4","previous":{"title":"ColorChallenge - Wednesday Yellow - Yellow Flower","permlink":"colorchallenge-wednesday-yellow-yellow-flower"},"next":{"title":"ColorChallenge - Thursday Green - Papers","permlink":"colorchallenge-thursday-green-papers-0f7fe48e897aa"}}}}