{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/components/layout.js","webpack:///./src/pages/index.js"],"names":["Bio","data","site","siteMetadata","author","social","style","display","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","name","marginRight","minWidth","borderRadius","imgStyle","summary","href","twitter","Layout","header","location","title","children","pathname","scale","marginTop","boxShadow","color","to","fontFamily","marginLeft","maxWidth","padding","Date","getFullYear","getSrc","node","srcSet","JSON","parse","json_metadata","image","BlogIndex","siteTitle","posts","allHiveArticle","edges","map","permlink","key","created","className","dangerouslySetInnerHTML","__html","body","flexWrap","justifyContent","alignItems","listStyle","margin","length","rel","pageQuery"],"mappings":"uLAqEeA,IAxDH,WACV,IAAMC,EAAI,OADM,EAwBWA,EAAKC,KAAKC,aAA7BC,EAxBQ,EAwBRA,OAAQC,EAxBA,EAwBAA,OAChB,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,OAGvB,kBAAC,IAAD,CACEC,MAAOT,EAAKU,OAAOC,gBAAgBF,MACnCG,IAAKT,EAAOU,KACZR,MAAO,CACLS,YAAaN,YAAO,IACpBD,aAAc,EACdQ,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAGjB,yCACa,gCAASb,EAAOU,MAD7B,IAC6CV,EAAOe,QADpD,IAGE,uBAAGC,KAAI,uBAAyBf,EAAOgB,SAAvC,wC,6FCQOC,IAhEA,SAAC,GAAmC,IAE7CC,EAFYC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SA4CjC,OAvCEH,EAJY,MAGVC,EAASG,SAET,wBACErB,MAAK,iBACAsB,YAAM,KADN,CAEHpB,aAAcC,YAAO,KACrBoB,UAAW,KAGb,kBAAC,OAAD,CACEvB,MAAO,CACLwB,UAAU,OACVC,MAAM,WAERC,GAAE,KAEDP,IAML,wBACEnB,MAAO,CACL2B,WAAW,yBACXJ,UAAW,IAGb,kBAAC,OAAD,CACEvB,MAAO,CACLwB,UAAU,OACVC,MAAM,WAERC,GAAE,KAEDP,IAMP,yBACEnB,MAAO,CACL4B,WAAW,OACXnB,YAAY,OACZoB,SAAU1B,YAAO,IACjB2B,QAAY3B,YAAO,KAAZ,IAAoBA,YAAO,EAAI,KAGxC,gCAASc,GACT,8BAAOG,GACP,sCACK,IAAIW,MAAOC,cADhB,mBAGE,uBAAGlB,KAAK,4BAAR,c,kCC/DR,sIAQMmB,EAAS,SAASC,GACtB,IAAIC,EAASC,KAAKC,MAAMH,EAAKI,eAAeC,MAC5C,OAAGJ,EACMA,EAAO,GAEP,eAwEIK,UArEG,SAAC,GAAwB,IAAtB7C,EAAqB,EAArBA,KAAMuB,EAAe,EAAfA,SACnBuB,EAAW9C,EAAKC,KAAKC,aAAasB,MAClCuB,EAAQ/C,EAAKgD,eAAeC,MAGlC,OACE,kBAAC,IAAD,CAAQ1B,SAAUA,EAAUC,MAAOsB,GACjC,kBAAC,IAAD,CAAKtB,MAAM,cACX,kBAAC,IAAD,MACCuB,EAAMG,KAAI,YAAe,IAAZX,EAAW,EAAXA,KACNf,EAAQe,EAAKf,OAASe,EAAKY,SACjC,OACE,6BAASC,IAAKb,EAAKY,UACjB,gCACE,wBACE9C,MAAO,CACLE,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMH,MAAO,CAAEwB,UAAU,QAAWE,GAAIQ,EAAKY,UAC1C3B,IAGL,+BAAQe,EAAKc,UAEf,iCACE,yBAAKC,UAAU,WAAWd,OAAQF,EAAOC,KACzC,uBAAGe,UAAU,YACXC,wBAAyB,CACvBC,OAAQjB,EAAKkB,aAOvB,wBACEpD,MAAO,CACLC,QAAS,OACToD,SAAU,OACVC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,OACX1B,QAAS,KAGV,EAKC,wBACEiB,IAAG,qBACH/C,MAAO,CACLyD,OAAQ,IAGT,GAEJf,EAAMgB,QAAU,IACf,kBAAC,OAAD,CAAMhC,GAAE,KAAQiC,IAAI,QAApB,kBAWL,IAAMC,EAAS","file":"component---src-pages-index-js-221fb573e45fe5530855.js","sourcesContent":["/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Image from \"gatsby-image\"\r\n\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\r\n        childImageSharp {\r\n          fixed(width: 50, height: 50) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const { author, social } = data.site.siteMetadata\r\n  return (\r\n    <div\r\n      style={{\r\n        display: `flex`,\r\n        marginBottom: rhythm(2.5),\r\n      }}\r\n    >\r\n      <Image\r\n        fixed={data.avatar.childImageSharp.fixed}\r\n        alt={author.name}\r\n        style={{\r\n          marginRight: rhythm(1 / 2),\r\n          marginBottom: 0,\r\n          minWidth: 50,\r\n          borderRadius: `100%`,\r\n        }}\r\n        imgStyle={{\r\n          borderRadius: `50%`,\r\n        }}\r\n      />\r\n      <p>\r\n        Written by <strong>{author.name}</strong> {author.summary}\r\n        {` `}\r\n        <a href={`https://twitter.com/${social.twitter}`}>\r\n          You should follow him on Twitter\r\n        </a>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nimport { rhythm, scale } from \"../utils/typography\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  let header\r\n\r\n  if (location.pathname === rootPath) {\r\n    header = (\r\n      <h1\r\n        style={{\r\n          ...scale(1.5),\r\n          marginBottom: rhythm(1.5),\r\n          marginTop: 0,\r\n        }}\r\n      >\r\n        <Link\r\n          style={{\r\n            boxShadow: `none`,\r\n            color: `inherit`,\r\n          }}\r\n          to={`/`}\r\n        >\r\n          {title}\r\n        </Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <h3\r\n        style={{\r\n          fontFamily: `Montserrat, sans-serif`,\r\n          marginTop: 0,\r\n        }}\r\n      >\r\n        <Link\r\n          style={{\r\n            boxShadow: `none`,\r\n            color: `inherit`,\r\n          }}\r\n          to={`/`}\r\n        >\r\n          {title}\r\n        </Link>\r\n      </h3>\r\n    )\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        marginLeft: `auto`,\r\n        marginRight: `auto`,\r\n        maxWidth: rhythm(24),\r\n        padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\r\n      }}\r\n    >\r\n      <header>{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        © {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst getSrc = function(node) {\r\n  let srcSet = JSON.parse(node.json_metadata).image;\r\n  if(srcSet)\r\n    return srcSet[0];\r\n  else \r\n    return 'noimage.png';\r\n}\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n  const siteTitle =data.site.siteMetadata.title\r\n  const posts = data.allHiveArticle.edges\r\n  const isFirst = true;\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO title=\"All posts\" />\r\n      <Bio />\r\n      {posts.map(({ node }) => {\r\n        const title = node.title || node.permlink\r\n        return (\r\n          <article key={node.permlink}>\r\n            <header>\r\n              <h3\r\n                style={{\r\n                  marginBottom: rhythm(1 / 4),\r\n                }}\r\n              >\r\n                <Link style={{ boxShadow: `none` }} to={node.permlink}>\r\n                  {title}\r\n                </Link>\r\n              </h3>\r\n              <small>{node.created}</small>\r\n            </header>\r\n            <section>\r\n              <img className='img-body' srcSet={getSrc(node)}/>\r\n              <p className='hive-body'\r\n                dangerouslySetInnerHTML={{\r\n                  __html: node.body,\r\n                }}\r\n              />\r\n            </section>\r\n          </article>\r\n        )\r\n      })}\r\n        <ul\r\n          style={{\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            listStyle: 'none',\r\n            padding: 0,\r\n          }}\r\n        >\r\n          {!isFirst && (\r\n            <Link to={``} rel=\"prev\">\r\n              ← Previous Page\r\n            </Link>\r\n          )}\r\n            <li\r\n              key={`pagination-number${1}`}\r\n              style={{\r\n                margin: 0,\r\n              }}\r\n            >\r\n              {1}\r\n            </li>\r\n          {posts.length >= 10 && (\r\n            <Link to={`/2`} rel=\"next\">\r\n              Next Page →\r\n            </Link>\r\n          )}\r\n        </ul>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allHiveArticle (\r\n      limit: 10\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          title\r\n          author\r\n          created(formatString: \"MMMM DD, YYYY\")\r\n          permlink\r\n          body,\r\n          json_metadata\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}